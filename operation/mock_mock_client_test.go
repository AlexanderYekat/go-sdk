// Code generated by Yandex patched mockery v1.1.0. DO NOT EDIT.

package operation

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
)

// MockClient is an autogenerated mock type for the mockClient type
type MockClient struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: ctx, in, opts
func (_m *MockClient) Cancel(ctx context.Context, in *operation.CancelOperationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 1 {
		rf, ok := ret.Get(0).(func(context.Context, *operation.CancelOperationRequest, ...grpc.CallOption) (*operation.Operation, error))
		if ok {
			return rf(ctx, in, opts...)
		}
	}

	var r0 *operation.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *operation.CancelOperationRequest, ...grpc.CallOption) *operation.Operation); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.CancelOperationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *MockClient) Get(ctx context.Context, in *operation.GetOperationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 1 {
		rf, ok := ret.Get(0).(func(context.Context, *operation.GetOperationRequest, ...grpc.CallOption) (*operation.Operation, error))
		if ok {
			return rf(ctx, in, opts...)
		}
	}

	var r0 *operation.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *operation.GetOperationRequest, ...grpc.CallOption) *operation.Operation); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operation.GetOperationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
